#include <iostream>
#include <cstdlib>
#include <stdexcept>

#include "LedBlinkGear.h"
#include "SecondHand.h"
#include "LedSweepGear.h"
#include "LedRefreshGear.h"
#include "antlights.h"

LedBlinkGear* turnLeft;
#define TURNSIGNAL_LAYER 500
#define TURNSIGNAL_BPM 120
const unsigned char turnSignalLeftRGB[] = {
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0xFF,0xFF,0x0,0xFF,0xFF,0x0,
  0xFF,0xFF,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,  0x0,0x0,0x0,
  0xFF,0xFF,0x0,0xFF,0xFF,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0};

LedBlinkGear* turnRight;
const unsigned char turnSignalRightRGB[] = {
  0x0,0x0,0x0,  0xFF,0xFF,0x0,0xFF,0xFF,0x0,0xFF,0xFF,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0xFF,0xFF,0x0, 0xFF,0xFF,0x0,
  0xFF,0xFF,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0};

LedBlinkGear* brakes;
#define BRAKELIGHTS_LAYER 400
const unsigned char brakesRGB[] = {
  0xFF,0x0,0x0, 0xFF,0x00,0x0,0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,  0x0,0x0,0x0,
  0x0,0x0,0x0,  0x0,0x0,0x0,  0xFF,0x0,0x0, 0xFF,0x0,0x0};

LedBlinkGear* runningLights;
#define RUNNINGLIGHTS_LAYER 10
const unsigned char runningLightsRGB[] = {
  0x0,0x0,0x0,   0x3F,0x00,0x0, 0x3f,0x3f,0x0, 0x0,0x0,0x0,
  0x0,0x0,0x0,   0x0,0x0,0x0,   0x0,0x0,0x0,   0x3f,0x3f,0x0,
  0x0,0x0,0x0,   0x0,0x0,0x0,   0x1f,0x1f,0x1f,0x7f,0x7f,0x7f,
  0x7f,0x7f,0x7f,0x1f,0x1f,0x1f,0x0,0x0,0x0,   0x0,0x0,0x0,
  0x3f,0x3f,0x0, 0x0,0x0,0x0,   0x0,0x0,0x0,   0x0,0x0,0x0,
  0x0,0x0,0x0,   0x3f,0x3f,0x0, 0x3F,0x0,0x0,  0x0,0x0,0x0};

LedBlinkGear* brights;
#define HEADLIGHTS_LAYER 100
const unsigned char brightsRGB[] = {
  0x0,0x0,0x0,   0x00,0x00,0x0, 0x00,0x00,0x0, 0x0,0x0,0x0,
  0x0,0x0,0x0,   0x0,0x0,0x0,   0x0,0x0,0x0,   0x00,0x00,0x0,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0x0,0x0,0x0,   0x0,0x0,0x0,   0x0,0x0,0x0,   0x00,0x00,0x0,
  0x0,0x0,0x0,   0x0,0x0,0x0,   0x0,0x0,0x0,   0x00,0x00,0x0};

#define KITT_LAYER 450
#define KITT_TRAIL 5
#define KITT_BORDER 3
#define KITT_RPM 30
LedSweepGear* kitt;
#define SECURITY_LAYER 50
#define SECURITY_TRAIL 3
#define SECURITY_BORDER 2
#define SECURITY_RPM 35
LedSweepGear* security;

#define LED_REFRESH_RATE_HZ 50 
SecondHand* LedSpinner;

void startLightingThread() {  
 
  LedSpinner=new SecondHand(LED_REFRESH_RATE_HZ);
  
  // black background at layer 0, started
  LedSpinner->insertGear(new LedBlinkGear(0,24,0,0,0, 0, 1, 100));

  // led refresher (layer 999), started
  LedRefreshGear::create(24);
  LedSpinner->insertGear(LedRefreshGear::getSingle());

  // available light effects, stopped
  LedSpinner->insertGear(security=(new LedSweepGear(0,24,
						    SECURITY_BORDER,
						    SECURITY_RPM,
						    SECURITY_LAYER))
			 ->configure(0x7f,0,0,4));
  security->stop();
  LedSpinner->insertGear(kitt=(new LedSweepGear(8,8,
						KITT_BORDER,KITT_RPM,
						KITT_LAYER))
			 ->configure(0xff,0xff,0xff,KITT_TRAIL)//white
			 );
  kitt->stop();
  LedSpinner->insertGear(runningLights=(new LedBlinkGear(runningLightsRGB,
							 RUNNINGLIGHTS_LAYER,
							 1,100)));
  runningLights->stop();
  LedSpinner->insertGear(brakes=(new LedBlinkGear(brakesRGB,
							 BRAKELIGHTS_LAYER,
						  1,100)));
  brakes->stop();
  LedSpinner->insertGear(brights=(new LedBlinkGear(brightsRGB,
							 HEADLIGHTS_LAYER,
						   1,100)));
  brights->stop();
  LedSpinner->insertGear(turnLeft=(new LedBlinkGear(turnSignalLeftRGB,
							 TURNSIGNAL_LAYER,
						    TURNSIGNAL_BPM,50)));
  turnLeft->stop();
  LedSpinner->insertGear(turnRight=(new LedBlinkGear(turnSignalRightRGB,
							 TURNSIGNAL_LAYER,
						     TURNSIGNAL_BPM,50)));
  turnRight->stop();
			 
  LedSpinner->start();
}

void* commandline(void* arg) {
  bool quit=false;
  std::string cmd;
  while(!quit) {
    std::cout <<"antlight:";
    getline(std::cin, cmd);
    if(cmd.compare(0,1,"b")==0) {
      std::cout << "brakes " << (brakes->toggle(true)->isActive()?"on":"off")
		<< std::endl;
    } else if(cmd.compare(0,1,"k")==0) {
      std::cout << "kitt " << (kitt->toggle(true)->isActive()?"on":"off")
		<< std::endl;
    } else if(cmd.compare(0,1,"l")==0) {
      turnRight->stop();
      turnLeft->start()->recenter();
      std::cout << "left turn" << std::endl;
    } else if(cmd.compare(0,1,"r")==0) {
      turnLeft->stop();
      turnRight->start()->recenter();
      std::cout << "left turn" << std::endl;
    } else if(cmd.compare(0,1,"c")==0) {
      turnLeft->stop();
      turnRight->stop();
      std::cout << "centered" << std::endl;
    } else if(cmd.compare(0,1,"n")==0) {
      std::cout << "running lights " 
		<< (runningLights->toggle(true)->isActive()?"on":"off") 
		<< std::endl;
    } else if(cmd.compare(0,1,"h")==0) {
      std::cout << "headlights " 
		<< (brights->toggle(true)->isActive()?"on":"off") 
		<< std::endl;
    } else if(cmd.compare(0,1,"s")==0) {
      std::cout << "security " 
		<< (security->toggle(true)->isActive()?"on":"off" )
		<< std::endl;
    } else if(cmd.compare(0,1,"q")==0) {
      quit=true;
      std::cout << "quit " 
		<< std::endl;
    }
  }
  return NULL;
}
